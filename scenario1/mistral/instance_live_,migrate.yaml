---
version: '2.0'
instance_live_migrate:
  description: migrate VMs
  type: direct
  input:
    - instance_id
    - target_host:
    - block_migration: False
    - disk_over_commit: False
  output:
    old_host: <% $.old_host %>
    new_host: <% $.new_host %>
    instance_pass_test: <% $.instance_pass_test %>
  tasks:
    get_instance_status_before:
      action: nova.servers_find id=<% $.instance_id %>
      publish:
        old_host: <% task(get_instance_status_before).result["OS-EXT-SRV-ATTR:host"] %>
        instance_name: <% task(get_instance_status_before).result.name %>
        old_status: <% task(get_instance_status_before).result.status %>
      on-success: 
        - live_migrate_instance: <% task(get_instance_status_before).result.status = "ACTIVE" %>
        - send_fail_email_2: <% task(get_instance_status_before).result.status != "ACTIVE" %>
      on-error: send_fail_email_1

    live_migrate_instance:
       action: nova.servers_live_migrate
       input:
         server: <% $.instance_id %>
         host: <% $.target_host %>
         block_migration: <% $.block_migration %>
         disk_over_commit: <% $.disk_over_commit %>
       retry:
         delay: 10
         count: 10
       on-success: wait_for_instance_migrating

    wait_for_instance_migrating:
      action: nova.servers_find id=<% $.instance_id %> status="MIGRATING"
      retry:
        delay: 3
        count: 30
      on-success: wait_for_instance_status_active
      on-error: get_instance_status_when_fail

    wait_for_instance_status_active:
      action: nova.servers_find id=<% $.instance_id %> status="ACTIVE"
      retry:
        delay: 10
        count: 30
      publish:
        new_status: <% task(wait_instance_status_active).result.status %>
        new_host: <% task(wait_instance_status_active).result["OS-EXT-SRV-ATTR:host"] %>
      on-success: check_diffrent_host
      on-error: get_instance_status_when_fail

    check_diffrent_host:
      description: get name vm's host
      action: std.noop
      on-complete:
        - test_vm: <% $.status_before = $.status_after and $.host_before != $.host_after %>
        - send_fail_email_1: <% $.status_before != $.status_after or $.host_before = $.host_after %>

    test_vm:
      workflow: verify_server server=<% $.instance_id %>
      publish:
        instance_pass_test: <% task(test_vm).result.instance_pass_test %>
      on-success: 
        - send_success_email: <% task(test_vm).result.instance_pass_test = true %>
        - send_fail_email_2: <% task(test_vm).result.instance_pass_test = false %>

    get_instance_status_when_fail:
      action: nova.servers_find id=<% $.instance_id %>
      publish:
        status_after: <% task(get_instance_status_when_fail).result.status %>
        host_after: <% task(get_instance_status_when_fail).result["OS-EXT-SRV-ATTR:host"] %>
      on-error: send_fail_email_3
    
    send_fail_email_1:
      action: std.echo 
      input:
        output: |
          Fail when live migrate instance : [ id: <% $.instance_id %> ], cause not found instance with that id.

    send_fail_email_2:
      action: std.echo 
      input:
        output: |
          Fail when live migrate instance : [ id: <% $.instance_id %> ; name: <% $.instance_nameame %> ; old_status: <% $.old_status %>] 
    send_fail_email_2:
      action: std.echo 
      input:
        output: |
          Fail when live migrate instance : [ name: <% $.instance_name %> ; old_status: <% $.status_before %> ; host_before: <% $.host_before %> ].
          Instance after workflow: [ name: <% $.instance_name %> ; status_after: <% $.status_after %> ; host_after: <% $.host_after %> ]
          Instance pass test: false
          Workflow id: <% execution().id %> 


    send_success_email:
      action: std.echo output="success"



#    send_error_email:
#      action: std.email
#        to_addrs: [admin@demo.com]
#        subject: ERROR evacuate vm
#        body: |
#          We try to evacuate vm <% $.instance_id> when host have prolem but fail
#          Please look at mistral workflow <% execution().id %> for more detail
#        from_addr: mistral@yopmail.com
#        smtp_server: smtp.google.com
#        smtp_password: SECRET
#
#    send_success_email:
#      action: std.email
#        to_addrs: [admin@demo.com]
#        subject: SUCCESS evacuate vm
#        body: |
#          We evacuate vm <% $.instance_id> when host have prolem.
#          Please look at mistral workflow <% execution().id %> for more detail
#        from_addr: mistral@yopmail.com
#        smtp_server: smtp.google.com
#        smtp_password: SECRET
# json inotu example
# {
# "instance_id": "af65df83-014d-4757-962a-f9e4d802323e" 
# }
    # echo_input:
    #   action: std.echo output=<% switch ( task(check_vm_work).result.instance_working = true => good , task(check_vm_work).result.instance_working = false => bad ) %>
    #   publish:
    #     result: <% task(echo_input).result %>
